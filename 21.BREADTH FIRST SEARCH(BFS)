#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#define MAX_VERTICES 100

// Queue structure for BFS
struct Queue {
    int data[MAX_VERTICES];
    int front;
    int rear;
};

// Function to initialize the queue
void initializeQueue(struct Queue* queue) {
    queue->front = -1;
    queue->rear = -1;
}

// Function to check if the queue is empty
bool isQueueEmpty(struct Queue* queue) {
    return (queue->front == -1);
}

// Function to check if the queue is full
bool isQueueFull(struct Queue* queue) {
    return (queue->rear == MAX_VERTICES - 1);
}

// Function to enqueue (insert) an element into the queue
void enqueue(struct Queue* queue, int value) {
    if (isQueueFull(queue)) {
        printf("Queue Overflow: Cannot enqueue element %d\n", value);
    } else {
        if (isQueueEmpty(queue)) {
            queue->front = 0; // Set front to 0 when inserting the first element
        }
        queue->rear++;
        queue->data[queue->rear] = value;
    }
}

// Function to dequeue (remove) an element from the queue
int dequeue(struct Queue* queue) {
    if (isQueueEmpty(queue)) {
        printf("Queue Underflow: Cannot dequeue element from an empty queue\n");
        return -1; // Return -1 to indicate queue underflow
    } else {
        int value = queue->data[queue->front];
        if (queue->front == queue->rear) {
            // If there is only one element in the queue, reset the queue
            initializeQueue(queue);
        } else {
            queue->front++;
        }
        return value;
    }
}

// Function to perform BFS on the graph
void BFS(int graph[MAX_VERTICES][MAX_VERTICES], int vertices, int startVertex) {
    struct Queue queue;
    bool visited[MAX_VERTICES] = {false};

    initializeQueue(&queue);
    visited[startVertex] = true;
    enqueue(&queue, startVertex);

    while (!isQueueEmpty(&queue)) {
        int currentVertex = dequeue(&queue);
        printf("%d ", currentVertex);

        for (int i = 0; i < vertices; i++) {
            if (graph[currentVertex][i] == 1 && !visited[i]) {
                visited[i] = true;
                enqueue(&queue, i);
            }
        }
    }
}

int main() {
    int vertices, edges;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &vertices);

    int graph[MAX_VERTICES][MAX_VERTICES] = {0};

    printf("Enter the number of edges in the graph: ");
    scanf("%d", &edges);

    printf("Enter %d edges (format: source destination):\n", edges);
    for (int i = 0; i < edges; i++) {
        int source, destination;
        scanf("%d %d", &source, &destination);
        graph[source][destination] = 1;
        graph[destination][source] = 1; // For undirected graph
    }

    int startVertex;
    printf("Enter the starting vertex for BFS: ");
    scanf("%d", &startVertex);

    printf("BFS Traversal: ");
    BFS(graph, vertices, startVertex);
    printf("\n");

    return 0;
}
